using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Amazon.Lambda.DynamoDBEvents;
using Amazon.Lambda.Core;
using Amazon.DynamoDBv2.DocumentModel;
using Newtonsoft.Json;
using Amazon.DynamoDBv2.Model;
using Amazon.DynamoDBv2;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]

namespace TriggerExample
{
    public class Book
    {
        public string isbn;
        public string author;
    }
    public class Function
    {
        private static AmazonDynamoDBClient client = new AmazonDynamoDBClient();
        public async Task<List<Book>> FunctionHandler(DynamoDBEvent input, ILambdaContext context)
        {
            Table table = Table.LoadTable(client, "CountOfBooksByAuthor");
            List<Book> books = new List<Book>();
            List<DynamoDBEvent.DynamodbStreamRecord> records = (List<DynamoDBEvent.DynamodbStreamRecord>)input.Records;

            #region Single Record
            if(records.Count > 0)
            {
                DynamoDBEvent.DynamodbStreamRecord record = records[0];
                if(record.EventName.Equals("INSERT"))
                {
                    Document myDoc = Document.FromAttributeMap(record.Dynamodb.NewImage);
                    Book myBook = JsonConvert.DeserializeObject<Book>(myDoc.ToJson());
                    var request = new UpdateItemRequest
                    {
                        TableName = "CountOfBooksByAuthor",
                        Key = new Dictionary<string, AttributeValue>
                        {
                            {"author", new AttributeValue {S = myBook.author} }
                        },
                        AttributeUpdates = new Dictionary<string, AttributeValueUpdate>()
                        {
                            {"count", new AttributeValueUpdate{Action = "ADD", Value = new AttributeValue{N = "1"}} },
                        },
                    };
                    await client.UpdateItemAsync(request);
                }
            }
            #endregion
            return books;
        }
    }
}
